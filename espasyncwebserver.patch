diff --git a/CMakeLists.txt b/CMakeLists.txt
index 64292ec..1d3b4cf 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -13,5 +13,5 @@ set(COMPONENT_REQUIRES
 
 register_component()
 
-target_compile_definitions(${COMPONENT_TARGET} PUBLIC -DESP32)
+target_compile_definitions(${COMPONENT_TARGET} PUBLIC -DESP32 -DASYNCWEBSERVER_REGEX)
 target_compile_options(${COMPONENT_TARGET} PRIVATE -fno-rtti)
diff --git a/src/AsyncEventSource.cpp b/src/AsyncEventSource.cpp
index 3b82575..171e43a 100644
--- a/src/AsyncEventSource.cpp
+++ b/src/AsyncEventSource.cpp
@@ -19,11 +19,7 @@
 */
 #include "Arduino.h"
 #include "AsyncEventSource.h"
-#ifdef ESP32
-#if ESP_IDF_VERSION_MAJOR >= 5
-#include "rom/ets_sys.h"
-#endif
-#endif
+#include "esp_system.h"
 
 static String generateEventMessage(const char *message, const char *event, uint32_t id, uint32_t reconnect){
   String ev = "";
@@ -190,7 +186,7 @@ void AsyncEventSourceClient::_queueMessage(AsyncEventSourceMessage *dataMessage)
     return;
   }
   if(_messageQueue.length() >= SSE_MAX_QUEUED_MESSAGES){
-      ets_printf("ERROR: Too many messages queued\n");
+      ESP_LOGE("_queueMessage", "ERROR: Too many messages queued\n");
       delete dataMessage;
   } else {
       _messageQueue.add(dataMessage);
diff --git a/src/AsyncWebSocket.cpp b/src/AsyncWebSocket.cpp
index bdfa197..8a7f393 100644
--- a/src/AsyncWebSocket.cpp
+++ b/src/AsyncWebSocket.cpp
@@ -28,11 +28,6 @@
 #else
 #include <Hash.h>
 #endif
-#ifdef ESP32
-#if ESP_IDF_VERSION_MAJOR >= 5
-#include "rom/ets_sys.h"
-#endif
-#endif
 
 #define MAX_PRINTF_LEN 64
 
@@ -1222,16 +1217,37 @@ AsyncWebSocketMessageBuffer * AsyncWebSocket::makeBuffer(uint8_t * data, size_t
   return buffer; 
 }
 
+/*
 void AsyncWebSocket::_cleanBuffers()
 {
   AsyncWebLockGuard l(_lock);
 
   for(AsyncWebSocketMessageBuffer * c: _buffers){
     if(c && c->canDelete()){
-        _buffers.remove(c);
+      ESP_LOGI("_cleanBuffers", "Should remove these buffers..");
+      //_buffers.remove(c);
     }
   }
 }
+*/
+
+void AsyncWebSocket::_cleanBuffers() {
+  AsyncWebLockGuard l(_lock);
+
+  auto it = _buffers.begin();
+  while (it != _buffers.end()) {
+    AsyncWebSocketMessageBuffer* c = *it;
+    if (c && c->canDelete()) {
+      // Directly remove using value, not iterator
+      if (_buffers.remove(c)) {
+        // Successfully removed, restart the iteration since the list may be altered
+        it = _buffers.begin();
+        continue;
+      }
+    }
+    ++it;
+  }
+}
 
 AsyncWebSocket::AsyncWebSocketClientLinkedList AsyncWebSocket::getClients() const {
   return _clients;
@@ -1264,15 +1280,9 @@ AsyncWebSocketResponse::AsyncWebSocketResponse(const String& key, AsyncWebSocket
   (String&)key += WS_STR_UUID;
   mbedtls_sha1_context ctx;
   mbedtls_sha1_init(&ctx);
-#if ESP_IDF_VERSION_MAJOR < 5
-  mbedtls_sha1_starts_ret(&ctx);
-  mbedtls_sha1_update_ret(&ctx, (const unsigned char*)key.c_str(), key.length());
-  mbedtls_sha1_finish_ret(&ctx, hash);
-#else
   mbedtls_sha1_starts(&ctx);
   mbedtls_sha1_update(&ctx, (const unsigned char*)key.c_str(), key.length());
   mbedtls_sha1_finish(&ctx, hash);
-#endif
   mbedtls_sha1_free(&ctx);
 #endif
   base64_encodestate _state;
diff --git a/src/WebAuthentication.cpp b/src/WebAuthentication.cpp
index 38b20f3..2feca54 100644
--- a/src/WebAuthentication.cpp
+++ b/src/WebAuthentication.cpp
@@ -71,15 +71,9 @@ static bool getMD5(uint8_t * data, uint16_t len, char * output){//33 bytes or mo
   memset(_buf, 0x00, 16);
 #ifdef ESP32
   mbedtls_md5_init(&_ctx);
-#if ESP_IDF_VERSION_MAJOR < 5
-  mbedtls_md5_starts_ret(&_ctx);
-  mbedtls_md5_update_ret(&_ctx, data, len);
-  mbedtls_md5_finish_ret(&_ctx, _buf);
-#else
   mbedtls_md5_starts(&_ctx);
   mbedtls_md5_update(&_ctx, data, len);
   mbedtls_md5_finish(&_ctx, _buf);
-#endif
 #else
   MD5Init(&_ctx);
   MD5Update(&_ctx, data, len);
diff --git a/src/WebRequest.cpp b/src/WebRequest.cpp
index bbce5ca..1220f29 100644
--- a/src/WebRequest.cpp
+++ b/src/WebRequest.cpp
@@ -180,10 +180,17 @@ void AsyncWebServerRequest::_onData(void *buf, size_t len){
 
 void AsyncWebServerRequest::_removeNotInterestingHeaders(){
   if (_interestingHeaders.containsIgnoreCase("ANY")) return; // nothing to do
-  for(const auto& header: _headers){
-      if(!_interestingHeaders.containsIgnoreCase(header->name().c_str())){
-        _headers.remove(header);
+  
+  auto it = _headers.begin();
+  while (it != _headers.end()) {
+    AsyncWebHeader* header = *it;
+    if (!_interestingHeaders.containsIgnoreCase(header->name().c_str())) {
+      if (_headers.remove(header)) {
+        it = _headers.begin();
+        continue;
       }
+    }
+    ++it;
   }
 }
 
